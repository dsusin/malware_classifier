import sys
import time
import os
import re
import simplejson
import urllib
import urllib2
import httplib
import logging
import json
from pprint import pprint
from pymongo import *


#-----------------------------------------------------------------------------

def print_progress_bar(max, done):
	sys.stdout.write ("\r")
	sys.stdout.write ("[")
	x = int((done/max)*100)
	inner_bar = ['#' for i in range(x/10)] + [" " for i in range(10 - (x/10))]
	sys.stdout.write("".join(inner_bar))
	sys.stdout.write("]")
	sys.stdout.write(" "+str(x))
	sys.stdout.write("%")
	sys.stdout.flush()
#	time.sleep(1) # only for test

#-----------------------------------------------------------------------------

def updateSample(db, md5, response):
	try:
		d=json.loads(response)
		db.samples.update({"md5": md5}, d)
	except Exception:
		import traceback
		logger.error('generic exception: ' + traceback.format_exc())
		logger.error(md5+" not processed")
	


##############################################################################
##############################################################################

apikey=""

# set up logging to file
logging.basicConfig(level=logging.DEBUG,
		format='%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
		datefmt='%Y-%m-%d %H:%M',
		filename='/tmp/malwareclassifier.log',
		filemode='w')

# define a Handler which writes INFO messages or higher to the sys.stderr
console = logging.StreamHandler()
console.setLevel(logging.INFO)

# set a format which is simpler for console use
formatter = logging.Formatter('%(asctime)s %(name)-12s: %(levelname)-8s %(message)s', '%Y-%m-%d %H:%M')

# tell the handler to use this format
console.setFormatter(formatter)

# add the handler to the root logger
logging.getLogger('').addHandler(console)

logger = logging.getLogger("main")

url = "https://www.virustotal.com/vtapi/v2/file/report"

#connecto to db
try:
	con=Connection()
	db=con['malware']
except:
	import traceback
	logger.error('generic exception: ' + traceback.format_exc())
	logger.error("Error connecting to DB")
	sys.exit(1)

#lista de ficheros en tabla de 4xN (se pueden hacer peticiones en batch de hasta 4 recursos)
md5Table=[]

try:
	for row in db.samples.find({"processed": "false"}, {"md5": 1}):
		md5Table.append(row['md5'])

except:
	import traceback
	logger.error('generic exception: ' + traceback.format_exc())
	logger.error("Error querying DB")
	sys.exit(1)

tableLen=len(md5Table)
update=0

for md5 in md5Table:
	update=update+1
	print_progress_bar(float(tableLen), float(update))

	parameters = {"resource": md5,
					"apikey": apikey}

	data = urllib.urlencode(parameters)
	req = urllib2.Request(url, data)

	try:
		response = urllib2.urlopen(req)
#		print response.headers
#		print response.getcode()
		jsonResponse = response.read()
		if not jsonResponse:
			logger.error(md5+" not processed")
		else:
			updateSample(db, md5, jsonResponse)

		time.sleep(16)
	except urllib2.HTTPError, e:
		logger.error('HTTPError = ' + str(e.code))
		logger.error(md5+" not processed")
		time.sleep(16)
		continue
	except urllib2.URLError, e:
		logger.error('URLError = ' + str(e.reason))
		logger.error(md5+" not processed")
		time.sleep(16)
		continue
	except httplib.HTTPException, e:
		logger.error('HTTPException')
		logger.error(md5+" not processed")
		time.sleep(16)
		continue
	except Exception:
		import traceback
		logger.error('generic exception: ' + traceback.format_exc())
		logger.error(md5+" not processed")
		time.sleep(16)
		continue


try:
	if db.samples.find({"processed": "false"}, {"md5": 1}).count():
		print "Some samples were not processed:"
		for row in db.samples.find({"processed": "false"}, {"md5": 1}):
			print row['md5']
	else:
		print "All samples processed!!"

except:
	import traceback
	logger.error('generic exception: ' + traceback.format_exc())
	logger.error("Error querying DB")
	sys.exit(1)
